#+STARTIP: overview
* interface tweaks
** Setting IDO mode
   #+BEGIN_SRC emacs-lisp
     (setq ido-enable-flex-matching t)
     (setq ido-everywhere t)
     (ido-mode 1)
   #+END_SRC
** Get rid of some ui stuff
   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1)
     (menu-bar-mode -1)
     (scroll-bar-mode -1)
   #+END_SRC
** No backup and autosave files
   #+BEGIN_SRC emacs-lisp
     (setq make-backup-files nil)   ;; stop creating backup~ files
     (setq auto-save-default nil)     ;; stop creating #autosave# files
   #+END_SRC
** Line and column numbering
   #+BEGIN_SRC emacs-lisp
     (line-number-mode 1)
     (column-number-mode 1)
   #+END_SRC
** Highlight current line
   #+BEGIN_SRC emacs-lisp
   (global-hl-line-mode t)
   #+END_SRC
** Show clock
   #+BEGIN_SRC emacs-lisp
     (setq display-time-format "%H:%M")
     (display-time-mode 1)
   #+END_SRC
** Small misc configuration
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t
	   (fset 'yes-or-no-p 'y-or-n-p)
	   (global-set-key (kbd "<f5>") 'revert-buffer)
	   (defalias 'list-buffers 'ibuffer))
   #+END_SRC
* common small packages
  #+BEGIN_SRC emacs-lisp
    (use-package try
      :ensure t)

    (use-package which-key
      :ensure t 
      :config
      (which-key-mode))

    ;; flashes the cursor's line when you scroll
    (use-package beacon
      :ensure t
      :config
      (beacon-mode 1)
      ;; this color looks good for the zenburn theme but not for the one
      ;; I'm using for the videos
      (setq beacon-color "#006666")
      )

    ;; deletes all the whitespace when you hit backspace or delete
    (use-package hungry-delete
      :ensure t
      :config
      (global-hungry-delete-mode))

    ;; expand the marked region in semantic increments (negative prefix to reduce region)
    (use-package expand-region
      :ensure t
      :config 
      (global-set-key (kbd "C-=") 'er/expand-region))
  #+END_SRC
* windows managment
  #+BEGIN_SRC emacs-lisp
    ;; Move between windows with SHIFT+arrow
    ;; (windmove-default-keybindings)
    ;; or
    (use-package ace-window
      :ensure t
      :init
      (progn
	(global-set-key [remap other-window] 'ace-window)
	(custom-set-faces
	 '(aw-leading-char-face
	   ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
	))
  #+END_SRC
* themes and fontse
  #+BEGIN_SRC emacs-lisp
    (use-package color-theme-sanityinc-tomorrow
      :ensure t
      :init
      (progn
	(load-theme 'sanityinc-tomorrow-blue t)))
    ;; Set default font
    (set-face-attribute 'default nil
			:family "Monaco"
			:height 140
			:weight 'normal
			:width 'normal)
  #+END_SRC
* org-mode
** Configuration
*** Edytuj kod w bieżącym oknie:
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC
*** Snippets for code block
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'org-structure-template-alist
	    '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC")) 
    #+END_SRC

Exportuj org-a do html-a po każdym zapisie
#+BEGIN_SRC emacs-lisp
  (defun toggle-org-html-export-on-save ()
    (interactive)
    (if (memq 'org-html-export-to-html after-save-hook)))
  (progn
    (remove-hook 'after-save-hook 'org-html-export-to-html t)
    (message "Disabled org html export on save for current buffer..."))
  (add-hook 'after-save-hook 'org-html-export-to-html nil t)
  (message "Enabled org html export on save for current buffer...")

#+END_SRC
** Package installation
  #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  #+END_SRC
* swiper
  #+BEGIN_SRC emacs-lisp

    ;; it looks like counsel is a requirement for swiper
    (use-package counsel
      :ensure t
      )

    ;; for better fuzzy search
    (use-package flx
      :ensure t
      :config
      (progn
	(setq ido-enable-flex-matching t)
	(setq ido-use-faces nil)))

    (use-package swiper
      :ensure try
      :config
      (progn
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(global-set-key "\C-s" 'swiper)
	(global-set-key (kbd "C-c C-r") 'ivy-resume)
	(global-set-key (kbd "<f6>") 'ivy-resume)
	(global-set-key (kbd "M-x") 'counsel-M-x)
	(global-set-key (kbd "C-x C-f") 'counsel-find-file)
	(global-set-key (kbd "<f1> f") 'counsel-describe-function)
	(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
	(global-set-key (kbd "<f1> l") 'counsel-load-library)
	(global-set-key (kbd "C-c k") 'counsel-ag)
	(global-set-key (kbd "C-x l") 'counsel-locate)
	(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	(setq ivy-re-builders-alist
	  '((t . ivy--regex-fuzzy)))))
  #+END_SRC
* magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind
    ("C-c g" . magit-status))
#+END_SRC
* avy navigation
  #+BEGIN_SRC emacs-lisp
    (use-package avy
      :ensure t
      :init (avy-setup-default)
      :config (progn
		;; Makes it easier to see the candidates
		(setq avy-background t)
		;; Shows both the candidates over the text
		(setq avy-styles-alist '((avy-goto-char-2 . at-full))))
      :bind (;; Search by 2 chars
	     ("C-'" . avy-goto-char-2)
	     ;; Search by first char of a word
	     ("C-\"" . avy-goto-word-1)))
  #+END_SRC
* autocomplete (autocomplete or company)
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :init
      (add-hook 'after-init-hook 'global-company-mode))
  #+END_SRC
* projectile + dumbjump
  #+BEGIN_SRC emacs-lisp
    ;; projectile
    (use-package projectile
      :ensure t
      :config
      (projectile-global-mode)
      (setq projectile-completion-system 'ivy))

    (use-package counsel-projectile
      :ensure t
      :config
      (counsel-projectile-mode t)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))

    (use-package dumb-jump
      :bind (("M-g o" . dumb-jump-go-other-window))
      ("M-g j" . dumb-jump-go)
      ("M-g x" . dumb-jump-go-prefer-external)
      ("M-g z" . dumb-jump-go-prefer-external-other-window)
      :config (setq dumb-jump-selector 'ivy) ;; (setq dumb-jump-selector 'helm)
      :ensure
  
      :config) 
    ;; (setq dumb-jump-selector 'ivy) ;; (setq dumb-jump-selector 'helm)
    :init
    (dumb-jump-mode
     :ensure)
  #+END_SRC

* aggressive-indent
  #+BEGIN_SRC emacs-lisp
    (use-package aggressive-indent
      :ensure t
      ;; :config
      ;; (add-hook 'clojure-mode-hook 'aggressive-indent-mode)
      ;; (add-hook 'emacs-lisp-mode-hook  'aggressive-indent-mode)
      )
  #+END_SRC
* rainbow-delimiters 
  #+BEGIN_SRC emacs-lisp
    (use-package rainbow-delimiters
	:ensure t
	:config
	(add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

    (require 'paren)
    (setq show-paren-mode 1)
    (set-face-background 'show-paren-match "#ff00aa")
    (set-face-foreground 'show-paren-match "#00FF00")
    (set-face-attribute 'show-paren-match nil :weight 'extra-bold)
  #+END_SRC
* parinfer
  #+BEGIN_SRC emacs-lisp
    (use-package parinfer
      :ensure t
      :hook ((clojure-mode emacs-lisp-mode) . parinfer-mode))
  #+END_SRC
* clojure/clojurescript
  #+BEGIN_SRC emacs-lisp
    ;; CIDER
    (use-package cider
      :ensure t)
    (use-package clojure-mode
      :ensure t)
    ;; Paredit/Parinfer/Smartparen
    ;; Company
    (add-hook 'cider-repl-mode-hook #'company-mode)
    (add-hook 'cider-mode-hook #'company-mode)
    ;; Magit
  #+END_SRC


* Custom functions
** kill whole word
   #+BEGIN_SRC emacs-lisp
     (defun kill-whole-word ()
       (interactive)
       (backward-word)
       (kill-word 1))

     (global-set-key (kbd "C-c w w") 'kill-whole-word)
   #+END_SRC
